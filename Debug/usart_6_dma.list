
usart_6_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043dc  080043dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e4  080043e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000010  080043fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080043fc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca1b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca7  00000000  00000000  0002ca5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002e708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002f0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025baf  00000000  00000000  0002f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd31  00000000  00000000  0005556f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a23  00000000  00000000  000612a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149cc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  00149d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800437c 	.word	0x0800437c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800437c 	.word	0x0800437c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UARTEx_RxEventCallback>:
uint16_t newPos = 0;



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a41      	ldr	r2, [pc, #260]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x118>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d14b      	bne.n	800057a <HAL_UARTEx_RxEventCallback+0xae>
	{
		oldPos = newPos;  // Update the last position before copying new data
 80004e2:	4b41      	ldr	r3, [pc, #260]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x11c>)
 80004e4:	881a      	ldrh	r2, [r3, #0]
 80004e6:	4b41      	ldr	r3, [pc, #260]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 80004e8:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 80004ea:	4b40      	ldr	r3, [pc, #256]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	4413      	add	r3, r2
 80004f4:	2b14      	cmp	r3, #20
 80004f6:	dd22      	ble.n	800053e <HAL_UARTEx_RxEventCallback+0x72>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 80004f8:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	f1c3 0314 	rsb	r3, r3, #20
 8000500:	817b      	strh	r3, [r7, #10]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);  // copy data in that remaining space
 8000502:	4b3a      	ldr	r3, [pc, #232]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x124>)
 800050a:	4413      	add	r3, r2
 800050c:	897a      	ldrh	r2, [r7, #10]
 800050e:	4939      	ldr	r1, [pc, #228]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 8000510:	4618      	mov	r0, r3
 8000512:	f003 ff1d 	bl	8004350 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 8000518:	2200      	movs	r2, #0
 800051a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 800051c:	897b      	ldrh	r3, [r7, #10]
 800051e:	4a35      	ldr	r2, [pc, #212]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 8000520:	1899      	adds	r1, r3, r2
 8000522:	887a      	ldrh	r2, [r7, #2]
 8000524:	897b      	ldrh	r3, [r7, #10]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	461a      	mov	r2, r3
 800052a:	4831      	ldr	r0, [pc, #196]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x124>)
 800052c:	f003 ff10 	bl	8004350 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8000530:	887a      	ldrh	r2, [r7, #2]
 8000532:	897b      	ldrh	r3, [r7, #10]
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x11c>)
 800053a:	801a      	strh	r2, [r3, #0]
 800053c:	e010      	b.n	8000560 <HAL_UARTEx_RxEventCallback+0x94>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x124>)
 8000546:	4413      	add	r3, r2
 8000548:	887a      	ldrh	r2, [r7, #2]
 800054a:	492a      	ldr	r1, [pc, #168]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 800054c:	4618      	mov	r0, r3
 800054e:	f003 feff 	bl	8004350 <memcpy>
			newPos = Size+oldPos;
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <HAL_UARTEx_RxEventCallback+0x120>)
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	887b      	ldrh	r3, [r7, #2]
 8000558:	4413      	add	r3, r2
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x11c>)
 800055e:	801a      	strh	r2, [r3, #0]
		}


		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8000560:	220a      	movs	r2, #10
 8000562:	4924      	ldr	r1, [pc, #144]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 8000564:	4824      	ldr	r0, [pc, #144]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000566:	f003 fe74 	bl	8004252 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <HAL_UARTEx_RxEventCallback+0x130>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <HAL_UARTEx_RxEventCallback+0x130>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f022 0204 	bic.w	r2, r2, #4
 8000578:	601a      	str	r2, [r3, #0]


	/****************** PROCESS (Little) THE DATA HERE *********************/

	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i=0; i<Size; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e013      	b.n	80005a8 <HAL_UARTEx_RxEventCallback+0xdc>
	{
		if ((RxBuf[i] == 'O') && (RxBuf[i+1] == 'K'))
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b4f      	cmp	r3, #79	; 0x4f
 800058a:	d10a      	bne.n	80005a2 <HAL_UARTEx_RxEventCallback+0xd6>
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 8000592:	5cd3      	ldrb	r3, [r2, r3]
 8000594:	2b4b      	cmp	r3, #75	; 0x4b
 8000596:	d104      	bne.n	80005a2 <HAL_UARTEx_RxEventCallback+0xd6>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000598:	2120      	movs	r1, #32
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f001 f877 	bl	8001690 <HAL_GPIO_TogglePin>
	for (int i=0; i<Size; i++)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	887b      	ldrh	r3, [r7, #2]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbe7      	blt.n	8000580 <HAL_UARTEx_RxEventCallback+0xb4>

	//			HAL_Delay(100);
	//			HAL_UART_Transmit(&huart2, (uint8_t *)RxBuf, sizeof(RxBuf), HAL_MAX_DELAY);
	//			HAL_UART_Transmit(&huart2, (uint8_t*)lf, sizeof(lf), HAL_MAX_DELAY);

	memset(RxBuf, 0, sizeof RxBuf);
 80005b0:	220a      	movs	r2, #10
 80005b2:	2100      	movs	r1, #0
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x128>)
 80005b6:	f003 fed9 	bl	800436c <memset>

	HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fafa 	bl	8000bb4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)MainBuf, sizeof(MainBuf), HAL_MAX_DELAY);
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2214      	movs	r2, #20
 80005c6:	490a      	ldr	r1, [pc, #40]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x124>)
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 80005ca:	f002 fbd7 	bl	8002d7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)lf, sizeof(lf), HAL_MAX_DELAY);
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2203      	movs	r2, #3
 80005d4:	490a      	ldr	r1, [pc, #40]	; (8000600 <HAL_UARTEx_RxEventCallback+0x134>)
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 80005d8:	f002 fbd0 	bl	8002d7c <HAL_UART_Transmit>


}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40004400 	.word	0x40004400
 80005e8:	2000011a 	.word	0x2000011a
 80005ec:	20000118 	.word	0x20000118
 80005f0:	20000104 	.word	0x20000104
 80005f4:	200000f8 	.word	0x200000f8
 80005f8:	2000002c 	.word	0x2000002c
 80005fc:	200000b0 	.word	0x200000b0
 8000600:	20000000 	.word	0x20000000

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fa58 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f81a 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f8b8 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 f898 	bl	8000748 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f866 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 800061c:	220a      	movs	r2, #10
 800061e:	4906      	ldr	r1, [pc, #24]	; (8000638 <main+0x34>)
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <main+0x38>)
 8000622:	f003 fe16 	bl	8004252 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <main+0x3c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <main+0x3c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f022 0204 	bic.w	r2, r2, #4
 8000634:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0x32>
 8000638:	200000f8 	.word	0x200000f8
 800063c:	2000002c 	.word	0x2000002c
 8000640:	200000b0 	.word	0x200000b0

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fe8a 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f001 f839 	bl	80016e0 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f8ec 	bl	8000850 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f870 	bl	800178c <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b2:	f000 f8cd 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fc44 	bl	8001f5c <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006da:	f000 f8b9 	bl	8000850 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3758      	adds	r7, #88	; 0x58
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800072c:	f002 fad8 	bl	8002ce0 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f88b 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000002c 	.word	0x2000002c
 8000744:	40004400 	.word	0x40004400

08000748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_DMA_Init+0x38>)
 8000750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <MX_DMA_Init+0x38>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6493      	str	r3, [r2, #72]	; 0x48
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_DMA_Init+0x38>)
 800075c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2010      	movs	r0, #16
 800076c:	f000 fb21 	bl	8000db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000770:	2010      	movs	r0, #16
 8000772:	f000 fb3a 	bl	8000dea <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_GPIO_Init+0xc4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f000 ff2d 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xc8>)
 800081e:	f000 fd75 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f000 fd66 	bl	800130c <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000892:	2005      	movs	r0, #5
 8000894:	f000 fa82 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0ac      	sub	sp, #176	; 0xb0
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2288      	movs	r2, #136	; 0x88
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fd51 	bl	800436c <memset>
  if(huart->Instance==USART2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <HAL_UART_MspInit+0x114>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d16c      	bne.n	80009ae <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd41 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008ec:	f7ff ffb0 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <HAL_UART_MspInit+0x118>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	4a31      	ldr	r2, [pc, #196]	; (80009bc <HAL_UART_MspInit+0x118>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fa:	6593      	str	r3, [r2, #88]	; 0x58
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_UART_MspInit+0x118>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <HAL_UART_MspInit+0x118>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <HAL_UART_MspInit+0x118>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <HAL_UART_MspInit+0x118>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000920:	230c      	movs	r3, #12
 8000922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000938:	2307      	movs	r3, #7
 800093a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fce0 	bl	800130c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_UART_MspInit+0x120>)
 8000950:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000984:	f000 fa4c 	bl	8000e20 <HAL_DMA_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800098e:	f7ff ff5f 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 8000996:	671a      	str	r2, [r3, #112]	; 0x70
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_UART_MspInit+0x11c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	2026      	movs	r0, #38	; 0x26
 80009a4:	f000 fa05 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009a8:	2026      	movs	r0, #38	; 0x26
 80009aa:	f000 fa1e 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	37b0      	adds	r7, #176	; 0xb0
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	200000b0 	.word	0x200000b0
 80009c4:	4002006c 	.word	0x4002006c

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f8ae 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <DMA1_Channel6_IRQHandler+0x10>)
 8000a22:	f000 fb94 	bl	800114e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000b0 	.word	0x200000b0

08000a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <USART2_IRQHandler+0x10>)
 8000a36:	f002 fa35 	bl	8002ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000002c 	.word	0x2000002c

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff ffea 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	; (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 fc37 	bl	8004308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fdb3 	bl	8000604 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aac:	080043ec 	.word	0x080043ec
  ldr r2, =_sbss
 8000ab0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ab4:	20000120 	.word	0x20000120

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>
	...

08000abc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_Init+0x3c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_Init+0x3c>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f000 f962 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 f80f 	bl	8000afc <HAL_InitTick>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	e001      	b.n	8000aee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aea:	f7ff feb7 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_InitTick+0x6c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d023      	beq.n	8000b58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_InitTick+0x70>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f96d 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10f      	bne.n	8000b52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d809      	bhi.n	8000b4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f000 f937 	bl	8000db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_InitTick+0x74>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e007      	b.n	8000b5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e004      	b.n	8000b5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e001      	b.n	8000b5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000000c 	.word	0x2000000c
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	20000008 	.word	0x20000008

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	2000011c 	.word	0x2000011c

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000011c 	.word	0x2000011c

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000000c 	.word	0x2000000c

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff3e 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff31 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e098      	b.n	8000f64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <HAL_DMA_Init+0x150>)
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d80f      	bhi.n	8000e5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <HAL_DMA_Init+0x154>)
 8000e46:	4413      	add	r3, r2
 8000e48:	4a4b      	ldr	r2, [pc, #300]	; (8000f78 <HAL_DMA_Init+0x158>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	009a      	lsls	r2, r3, #2
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_DMA_Init+0x15c>)
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e5c:	e00e      	b.n	8000e7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <HAL_DMA_Init+0x160>)
 8000e66:	4413      	add	r3, r2
 8000e68:	4a43      	ldr	r2, [pc, #268]	; (8000f78 <HAL_DMA_Init+0x158>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	009a      	lsls	r2, r3, #2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a42      	ldr	r2, [pc, #264]	; (8000f84 <HAL_DMA_Init+0x164>)
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ed6:	d039      	beq.n	8000f4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_DMA_Init+0x15c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d11a      	bne.n	8000f18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_DMA_Init+0x168>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f003 031c 	and.w	r3, r3, #28
 8000eee:	210f      	movs	r1, #15
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4924      	ldr	r1, [pc, #144]	; (8000f88 <HAL_DMA_Init+0x168>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <HAL_DMA_Init+0x168>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6859      	ldr	r1, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f003 031c 	and.w	r3, r3, #28
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	491d      	ldr	r1, [pc, #116]	; (8000f88 <HAL_DMA_Init+0x168>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
 8000f16:	e019      	b.n	8000f4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_DMA_Init+0x16c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f20:	f003 031c 	and.w	r3, r3, #28
 8000f24:	210f      	movs	r1, #15
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4917      	ldr	r1, [pc, #92]	; (8000f8c <HAL_DMA_Init+0x16c>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_DMA_Init+0x16c>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6859      	ldr	r1, [r3, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f003 031c 	and.w	r3, r3, #28
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	4911      	ldr	r1, [pc, #68]	; (8000f8c <HAL_DMA_Init+0x16c>)
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40020407 	.word	0x40020407
 8000f74:	bffdfff8 	.word	0xbffdfff8
 8000f78:	cccccccd 	.word	0xcccccccd
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	bffdfbf8 	.word	0xbffdfbf8
 8000f84:	40020400 	.word	0x40020400
 8000f88:	400200a8 	.word	0x400200a8
 8000f8c:	400204a8 	.word	0x400204a8

08000f90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_DMA_Start_IT+0x20>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e04b      	b.n	8001048 <HAL_DMA_Start_IT+0xb8>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d13a      	bne.n	800103a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0201 	bic.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f95f 	bl	80012ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 020e 	orr.w	r2, r2, #14
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e00f      	b.n	8001028 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0204 	bic.w	r2, r2, #4
 8001016:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 020a 	orr.w	r2, r2, #10
 8001026:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e005      	b.n	8001046 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001042:	2302      	movs	r3, #2
 8001044:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d008      	beq.n	800107a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e022      	b.n	80010c0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020e 	bic.w	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 021c 	and.w	r2, r3, #28
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2101      	movs	r1, #1
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d005      	beq.n	80010f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2204      	movs	r2, #4
 80010e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e029      	b.n	8001144 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 020e 	bic.w	r2, r2, #14
 80010fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f003 021c 	and.w	r2, r3, #28
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	4798      	blx	r3
    }
  }
  return status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f003 031c 	and.w	r3, r3, #28
 800116e:	2204      	movs	r2, #4
 8001170:	409a      	lsls	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d026      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x7a>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d021      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0204 	bic.w	r2, r2, #4
 80011a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 021c 	and.w	r2, r3, #28
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	2104      	movs	r1, #4
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d071      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011c6:	e06c      	b.n	80012a2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	f003 031c 	and.w	r3, r3, #28
 80011d0:	2202      	movs	r2, #2
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d02e      	beq.n	800123a <HAL_DMA_IRQHandler+0xec>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d029      	beq.n	800123a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020a 	bic.w	r2, r2, #10
 8001202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	f003 021c 	and.w	r2, r3, #28
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	2102      	movs	r1, #2
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d038      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001238:	e033      	b.n	80012a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 031c 	and.w	r3, r3, #28
 8001242:	2208      	movs	r2, #8
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x156>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d025      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020e 	bic.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f003 021c 	and.w	r2, r3, #28
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
}
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f003 021c 	and.w	r2, r3, #28
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d108      	bne.n	80012f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012ee:	e007      	b.n	8001300 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	60da      	str	r2, [r3, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e17f      	b.n	800161c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8171 	beq.w	8001616 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x40>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d118      	bne.n	80013ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d017      	beq.n	8001428 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80ac 	beq.w	8001616 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b5f      	ldr	r3, [pc, #380]	; (800163c <HAL_GPIO_Init+0x330>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	4a5e      	ldr	r2, [pc, #376]	; (800163c <HAL_GPIO_Init+0x330>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ca:	4b5c      	ldr	r3, [pc, #368]	; (800163c <HAL_GPIO_Init+0x330>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d6:	4a5a      	ldr	r2, [pc, #360]	; (8001640 <HAL_GPIO_Init+0x334>)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001500:	d025      	beq.n	800154e <HAL_GPIO_Init+0x242>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <HAL_GPIO_Init+0x338>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01f      	beq.n	800154a <HAL_GPIO_Init+0x23e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4e      	ldr	r2, [pc, #312]	; (8001648 <HAL_GPIO_Init+0x33c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x23a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4d      	ldr	r2, [pc, #308]	; (800164c <HAL_GPIO_Init+0x340>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x236>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <HAL_GPIO_Init+0x344>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x232>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <HAL_GPIO_Init+0x348>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x22e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4a      	ldr	r2, [pc, #296]	; (8001658 <HAL_GPIO_Init+0x34c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x22a>
 8001532:	2306      	movs	r3, #6
 8001534:	e00c      	b.n	8001550 <HAL_GPIO_Init+0x244>
 8001536:	2307      	movs	r3, #7
 8001538:	e00a      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800153a:	2305      	movs	r3, #5
 800153c:	e008      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800153e:	2304      	movs	r3, #4
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x244>
 8001542:	2303      	movs	r3, #3
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x244>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800154e:	2300      	movs	r3, #0
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001560:	4937      	ldr	r1, [pc, #220]	; (8001640 <HAL_GPIO_Init+0x334>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_GPIO_Init+0x350>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001592:	4a32      	ldr	r2, [pc, #200]	; (800165c <HAL_GPIO_Init+0x350>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_GPIO_Init+0x350>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <HAL_GPIO_Init+0x350>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_GPIO_Init+0x350>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_GPIO_Init+0x350>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_GPIO_Init+0x350>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_GPIO_Init+0x350>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f ae78 	bne.w	800131c <HAL_GPIO_Init+0x10>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	48001400 	.word	0x48001400
 8001658:	48001800 	.word	0x48001800
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800167c:	e002      	b.n	8001684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43d9      	mvns	r1, r3
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	400b      	ands	r3, r1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_PWREx_GetVoltageRange+0x18>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ee:	d130      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fc:	d038      	beq.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001706:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2232      	movs	r2, #50	; 0x32
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001724:	e002      	b.n	800172c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3b01      	subs	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	d102      	bne.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f2      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174c:	d110      	bne.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e00f      	b.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d007      	beq.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40007000 	.word	0x40007000
 8001784:	20000004 	.word	0x20000004
 8001788:	431bde83 	.word	0x431bde83

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e3d8      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179e:	4b97      	ldr	r3, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a8:	4b94      	ldr	r3, [pc, #592]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80e4 	beq.w	8001988 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4a>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	f040 808b 	bne.w	80018e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	f040 8087 	bne.w	80018e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e3b0      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1a      	ldr	r2, [r3, #32]
 80017f2:	4b82      	ldr	r3, [pc, #520]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_RCC_OscConfig+0x7c>
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001806:	e005      	b.n	8001814 <HAL_RCC_OscConfig+0x88>
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001814:	4293      	cmp	r3, r2
 8001816:	d223      	bcs.n	8001860 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fd43 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e391      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	496d      	ldr	r1, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184a:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	4968      	ldr	r1, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e025      	b.n	80018ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a65      	ldr	r2, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4960      	ldr	r1, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	495b      	ldr	r1, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fd03 	bl	80022a8 <RCC_SetFlashLatencyFromMSIRange>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e351      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ac:	f000 fc38 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	4950      	ldr	r1, [pc, #320]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_RCC_OscConfig+0x278>)
 80018ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f913 	bl	8000afc <HAL_InitTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d052      	beq.n	8001986 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	e335      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d032      	beq.n	8001952 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a42      	ldr	r2, [pc, #264]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f950 	bl	8000b9c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001900:	f7ff f94c 	bl	8000b9c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e31e      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a36      	ldr	r2, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4931      	ldr	r1, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e01a      	b.n	8001988 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800195e:	f7ff f91d 	bl	8000b9c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001966:	f7ff f919 	bl	8000b9c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e2eb      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x1da>
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001986:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d074      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b08      	cmp	r3, #8
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x21a>
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d10e      	bne.n	80019be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d10b      	bne.n	80019be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d064      	beq.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d160      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e2c8      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x24a>
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e026      	b.n	8001a24 <HAL_RCC_OscConfig+0x298>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019de:	d115      	bne.n	8001a0c <HAL_RCC_OscConfig+0x280>
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a02      	ldr	r2, [pc, #8]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x298>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08004394 	.word	0x08004394
 8001a04:	20000004 	.word	0x20000004
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a9f      	ldr	r2, [pc, #636]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b9d      	ldr	r3, [pc, #628]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9c      	ldr	r2, [pc, #624]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f8b6 	bl	8000b9c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f8b2 	bl	8000b9c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e284      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2a8>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f8a2 	bl	8000b9c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f89e 	bl	8000b9c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e270      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2d0>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d060      	beq.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x310>
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d119      	bne.n	8001aca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d116      	bne.n	8001aca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x328>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e24d      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4973      	ldr	r1, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac8:	e040      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d023      	beq.n	8001b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f85d 	bl	8000b9c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f859 	bl	8000b9c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e22b      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af8:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	495f      	ldr	r1, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
 8001b18:	e018      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b5d      	ldr	r3, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5c      	ldr	r2, [pc, #368]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f839 	bl	8000b9c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f835 	bl	8000b9c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e207      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f814 	bl	8000b9c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f810 	bl	8000b9c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1e2      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ef      	beq.n	8001b78 <HAL_RCC_OscConfig+0x3ec>
 8001b98:	e01b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	4a3b      	ldr	r2, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7fe fff7 	bl	8000b9c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7fe fff3 	bl	8000b9c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1c5      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ef      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80a6 	beq.w	8001d2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10d      	bne.n	8001c0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d118      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c24:	f7fe ffba 	bl	8000b9c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7fe ffb6 	bl	8000b9c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e188      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x508>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4d8>
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c62:	e029      	b.n	8001cb8 <HAL_RCC_OscConfig+0x52c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d115      	bne.n	8001c98 <HAL_RCC_OscConfig+0x50c>
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_RCC_OscConfig+0x504>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x52c>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	4b91      	ldr	r3, [pc, #580]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	4a90      	ldr	r2, [pc, #576]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca8:	4b8d      	ldr	r3, [pc, #564]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	4a8c      	ldr	r2, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d016      	beq.n	8001cee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7fe ff6c 	bl	8000b9c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7fe ff68 	bl	8000b9c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e138      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cde:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ed      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x53c>
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7fe ff55 	bl	8000b9c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe ff51 	bl	8000b9c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e121      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0c:	4b74      	ldr	r3, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ed      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1a:	7ffb      	ldrb	r3, [r7, #31]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d20:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 810c 	beq.w	8001f4e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 80d4 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d130      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d127      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11f      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d80:	2a07      	cmp	r2, #7
 8001d82:	bf14      	ite	ne
 8001d84:	2201      	movne	r2, #1
 8001d86:	2200      	moveq	r2, #0
 8001d88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d113      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d06e      	beq.n	8001e94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d069      	beq.n	8001e90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dc8:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0bb      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de4:	f7fe feda 	bl	8000b9c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe fed6 	bl	8000b9c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e0a8      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0a:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <HAL_RCC_OscConfig+0x758>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e24:	0212      	lsls	r2, r2, #8
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e2c:	0852      	lsrs	r2, r2, #1
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	0552      	lsls	r2, r2, #21
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0652      	lsls	r2, r2, #25
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e44:	0912      	lsrs	r2, r2, #4
 8001e46:	0452      	lsls	r2, r2, #17
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	4925      	ldr	r1, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e68:	f7fe fe98 	bl	8000b9c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe fe94 	bl	8000b9c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e066      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8e:	e05e      	b.n	8001f4e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e05d      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d156      	bne.n	8001f4e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eb8:	f7fe fe70 	bl	8000b9c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fe6c 	bl	8000b9c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e03e      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_RCC_OscConfig+0x754>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x734>
 8001ede:	e036      	b.n	8001f4e <HAL_RCC_OscConfig+0x7c2>
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d02d      	beq.n	8001f4a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001f18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fe3b 	bl	8000b9c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe fe37 	bl	8000b9c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e009      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_OscConfig+0x7cc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x79e>
 8001f48:	e001      	b.n	8001f4e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0c8      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4961      	ldr	r1, [pc, #388]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b0      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d04c      	beq.n	8002046 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb4:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d121      	bne.n	8002004 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e09e      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fcc:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d115      	bne.n	8002004 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e092      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e086      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e07e      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	493f      	ldr	r1, [pc, #252]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002016:	f7fe fdc1 	bl	8000b9c <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	e00a      	b.n	8002034 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201e:	f7fe fdbd 	bl	8000b9c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e066      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 020c 	and.w	r2, r3, #12
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	429a      	cmp	r2, r3
 8002044:	d1eb      	bne.n	800201e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	492c      	ldr	r1, [pc, #176]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d210      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4924      	ldr	r1, [pc, #144]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e036      	b.n	8002102 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4918      	ldr	r1, [pc, #96]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4910      	ldr	r1, [pc, #64]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d2:	f000 f825 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490c      	ldr	r1, [pc, #48]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fd00 	bl	8000afc <HAL_InitTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002100:	7afb      	ldrb	r3, [r7, #11]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
 8002114:	08004394 	.word	0x08004394
 8002118:	20000004 	.word	0x20000004
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x34>
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d121      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d11e      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e005      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <HAL_RCC_GetSysClockFreq+0x10c>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d102      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_RCC_GetSysClockFreq+0x110>)
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e004      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_GetSysClockFreq+0x114>)
 80021a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d134      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0xac>
 80021c4:	e005      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c8:	617b      	str	r3, [r7, #20]
      break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ce:	617b      	str	r3, [r7, #20]
      break;
 80021d0:	e002      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	617b      	str	r3, [r7, #20]
      break;
 80021d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	3301      	adds	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	fb03 f202 	mul.w	r2, r3, r2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	0e5b      	lsrs	r3, r3, #25
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002218:	69bb      	ldr	r3, [r7, #24]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	080043ac 	.word	0x080043ac
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCC_GetHCLKFreq+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002254:	f7ff fff0 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	080043a4 	.word	0x080043a4

0800227c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002280:	f7ff ffda 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0adb      	lsrs	r3, r3, #11
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080043a4 	.word	0x080043a4

080022a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff fa00 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
 80022c6:	e014      	b.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022e0:	f7ff f9f0 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 80022e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f8:	d10b      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d919      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2ba0      	cmp	r3, #160	; 0xa0
 8002304:	d902      	bls.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002306:	2302      	movs	r3, #2
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e013      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e010      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d902      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002318:	2303      	movs	r3, #3
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e00a      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d102      	bne.n	800232a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002324:	2302      	movs	r3, #2
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	e004      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d101      	bne.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002330:	2301      	movs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 0207 	bic.w	r2, r3, #7
 800233c:	4909      	ldr	r1, [pc, #36]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002370:	2300      	movs	r3, #0
 8002372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002374:	2300      	movs	r3, #0
 8002376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002380:	2b00      	cmp	r3, #0
 8002382:	d041      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002388:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800238c:	d02a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800238e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002392:	d824      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800239a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800239e:	d81e      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a8:	d010      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023aa:	e018      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023ac:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b8:	e015      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fabb 	bl	800293c <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ca:	e00c      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3320      	adds	r3, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fba6 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023dc:	e003      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	74fb      	strb	r3, [r7, #19]
      break;
 80023e2:	e000      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ec:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fa:	4973      	ldr	r1, [pc, #460]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002402:	e001      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d041      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800241c:	d02a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800241e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002422:	d824      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800242a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242e:	d81e      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d010      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800243a:	e018      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a61      	ldr	r2, [pc, #388]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002448:	e015      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa73 	bl	800293c <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3320      	adds	r3, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb5e 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	74fb      	strb	r3, [r7, #19]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800248a:	494f      	ldr	r1, [pc, #316]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a0 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3a      	ldr	r2, [pc, #232]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fb58 	bl	8000b9c <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fb54 	bl	8000b9c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	74fb      	strb	r3, [r7, #19]
        break;
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d019      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fb13 	bl	8000b9c <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002578:	e00b      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fb0f 	bl	8000b9c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d902      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	74fb      	strb	r3, [r7, #19]
            break;
 8002590:	e006      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ec      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b6:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025be:	e009      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
 80025c4:	e006      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d4:	7c7b      	ldrb	r3, [r7, #17]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b9e      	ldr	r3, [pc, #632]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4a9d      	ldr	r2, [pc, #628]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f2:	4b98      	ldr	r3, [pc, #608]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f023 0203 	bic.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	4994      	ldr	r1, [pc, #592]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002614:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 020c 	bic.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	498c      	ldr	r1, [pc, #560]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002636:	4b87      	ldr	r3, [pc, #540]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4983      	ldr	r1, [pc, #524]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002658:	4b7e      	ldr	r3, [pc, #504]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	497b      	ldr	r1, [pc, #492]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	4972      	ldr	r1, [pc, #456]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	496a      	ldr	r1, [pc, #424]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	4961      	ldr	r1, [pc, #388]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026e0:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	4959      	ldr	r1, [pc, #356]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b54      	ldr	r3, [pc, #336]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	4950      	ldr	r1, [pc, #320]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	4948      	ldr	r1, [pc, #288]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	493f      	ldr	r1, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d028      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002776:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002786:	d106      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	e011      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279e:	d10c      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f8c8 	bl	800293c <RCCEx_PLLSAI1_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	491f      	ldr	r1, [pc, #124]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e4:	d106      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f0:	60d3      	str	r3, [r2, #12]
 80027f2:	e011      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f899 	bl	800293c <RCCEx_PLLSAI1_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002842:	d109      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a02      	ldr	r2, [pc, #8]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284e:	60d3      	str	r3, [r2, #12]
 8002850:	e014      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002860:	d10c      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f867 	bl	800293c <RCCEx_PLLSAI1_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02f      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002888:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2102      	movs	r1, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f844 	bl	800293c <RCCEx_PLLSAI1_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d014      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	74bb      	strb	r3, [r7, #18]
 80028c2:	e011      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3320      	adds	r3, #32
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f925 	bl	8002b24 <RCCEx_PLLSAI2_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002902:	490d      	ldr	r1, [pc, #52]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002926:	4904      	ldr	r1, [pc, #16]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800292e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800294a:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d10d      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
       ||
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800296e:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
       ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d047      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e044      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d018      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0x86>
 8002990:	2b03      	cmp	r3, #3
 8002992:	d825      	bhi.n	80029e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d002      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x62>
 8002998:	2b02      	cmp	r3, #2
 800299a:	d009      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x74>
 800299c:	e020      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800299e:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ae:	e01a      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b0:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e013      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029c2:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029de:	e006      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e004      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	4944      	ldr	r1, [pc, #272]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d17d      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fe f8ba 	bl	8000b9c <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2c:	f7fe f8b6 	bl	8000b9c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a40:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ef      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d160      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6892      	ldr	r2, [r2, #8]
 8002a68:	0211      	lsls	r1, r2, #8
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	0912      	lsrs	r2, r2, #4
 8002a70:	0452      	lsls	r2, r2, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	492a      	ldr	r1, [pc, #168]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
 8002a7a:	e027      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d112      	bne.n	8002aa8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	0211      	lsls	r1, r2, #8
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6912      	ldr	r2, [r2, #16]
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0552      	lsls	r2, r2, #21
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	491f      	ldr	r1, [pc, #124]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	610b      	str	r3, [r1, #16]
 8002aa6:	e011      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	0211      	lsls	r1, r2, #8
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6952      	ldr	r2, [r2, #20]
 8002abe:	0852      	lsrs	r2, r2, #1
 8002ac0:	3a01      	subs	r2, #1
 8002ac2:	0652      	lsls	r2, r2, #25
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	4916      	ldr	r1, [pc, #88]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe f860 	bl	8000b9c <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae0:	f7fe f85c 	bl	8000b9c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
          break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4904      	ldr	r1, [pc, #16]	; (8002b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b32:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
       ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b56:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
       ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d047      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e044      	b.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d018      	beq.n	8002baa <RCCEx_PLLSAI2_Config+0x86>
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d825      	bhi.n	8002bc8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d002      	beq.n	8002b86 <RCCEx_PLLSAI2_Config+0x62>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d009      	beq.n	8002b98 <RCCEx_PLLSAI2_Config+0x74>
 8002b84:	e020      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b86:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11d      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b96:	e01a      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e013      	b.n	8002bd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc6:	e006      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e004      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d167      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fd ffc6 	bl	8000b9c <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c14:	f7fd ffc2 	bl	8000b9c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
        break;
 8002c26:	e005      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ef      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d14a      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	0912      	lsrs	r2, r2, #4
 8002c58:	0452      	lsls	r2, r2, #17
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	491f      	ldr	r1, [pc, #124]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	614b      	str	r3, [r1, #20]
 8002c62:	e011      	b.n	8002c88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	0211      	lsls	r1, r2, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6912      	ldr	r2, [r2, #16]
 8002c7a:	0852      	lsrs	r2, r2, #1
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0652      	lsls	r2, r2, #25
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4916      	ldr	r1, [pc, #88]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fd ff82 	bl	8000b9c <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c9c:	f7fd ff7e 	bl	8000b9c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
          break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4904      	ldr	r1, [pc, #16]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e040      	b.n	8002d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fdce 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fbca 	bl	80034b8 <UART_SetConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e022      	b.n	8002d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fe76 	bl	8003a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fefd 	bl	8003b6c <UART_CheckIdleState>
 8002d72:	4603      	mov	r3, r0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	f040 8082 	bne.w	8002e9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_UART_Transmit+0x26>
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07a      	b.n	8002e9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Transmit+0x38>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e073      	b.n	8002e9c <HAL_UART_Transmit+0x120>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2221      	movs	r2, #33	; 0x21
 8002dc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dca:	f7fd fee7 	bl	8000b9c <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Transmit+0x80>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e0c:	e02d      	b.n	8002e6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fef0 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e039      	b.n	8002e9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3302      	adds	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e008      	b.n	8002e58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1cb      	bne.n	8002e0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2140      	movs	r1, #64	; 0x40
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 febc 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e005      	b.n	8002e9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0ba      	sub	sp, #232	; 0xe8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ece:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00f      	beq.n	8002f0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 82a6 	beq.w	800344e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
      }
      return;
 8002f0a:	e2a0      	b.n	800344e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8117 	beq.w	8003144 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f26:	4b85      	ldr	r3, [pc, #532]	; (800313c <HAL_UART_IRQHandler+0x298>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 810a 	beq.w	8003144 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d011      	beq.n	8002f60 <HAL_UART_IRQHandler+0xbc>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d011      	beq.n	8002f90 <HAL_UART_IRQHandler+0xec>
 8002f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	f043 0204 	orr.w	r2, r3, #4
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d011      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x11c>
 8002f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2204      	movs	r2, #4
 8002fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb6:	f043 0202 	orr.w	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d017      	beq.n	8002ffc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff2:	f043 0208 	orr.w	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003004:	2b00      	cmp	r3, #0
 8003006:	d012      	beq.n	800302e <HAL_UART_IRQHandler+0x18a>
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00c      	beq.n	800302e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800301c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 820c 	beq.w	8003452 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800307a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04f      	beq.n	8003126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 ff4a 	bl	8003f20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d141      	bne.n	800311e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3308      	adds	r3, #8
 80030a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3308      	adds	r3, #8
 80030c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1d9      	bne.n	800309a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_UART_IRQHandler+0x29c>)
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd ffe6 	bl	80010cc <HAL_DMA_Abort_IT>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d017      	beq.n	8003136 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003110:	4610      	mov	r0, r2
 8003112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	e00f      	b.n	8003136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9c4 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	e00b      	b.n	8003136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9c0 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	e007      	b.n	8003136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9bc 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003134:	e18d      	b.n	8003452 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003136:	bf00      	nop
    return;
 8003138:	e18b      	b.n	8003452 <HAL_UART_IRQHandler+0x5ae>
 800313a:	bf00      	nop
 800313c:	04000120 	.word	0x04000120
 8003140:	080041bf 	.word	0x080041bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	2b01      	cmp	r3, #1
 800314a:	f040 8146 	bne.w	80033da <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 813f 	beq.w	80033da <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800315c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8138 	beq.w	80033da <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2210      	movs	r2, #16
 8003170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	f040 80b4 	bne.w	80032ea <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800318e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 815f 	beq.w	8003456 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800319e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031a2:	429a      	cmp	r2, r3
 80031a4:	f080 8157 	bcs.w	8003456 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 8085 	bne.w	80032ce <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1da      	bne.n	80031c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800321e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800323a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e1      	bne.n	800320e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3308      	adds	r3, #8
 8003250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800325a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3308      	adds	r3, #8
 800326a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800326e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800327c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e3      	bne.n	800324a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800329c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329e:	f023 0310 	bic.w	r3, r3, #16
 80032a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e4      	bne.n	800328e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fec1 	bl	8001050 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd f8f2 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032e8:	e0b5      	b.n	8003456 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80a7 	beq.w	800345a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800330c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a2 	beq.w	800345a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800332a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003338:	647b      	str	r3, [r7, #68]	; 0x44
 800333a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800333e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e4      	bne.n	8003316 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	623b      	str	r3, [r7, #32]
   return(result);
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003370:	633a      	str	r2, [r7, #48]	; 0x30
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e3      	bne.n	800334c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0310 	bic.w	r3, r3, #16
 80033aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	617b      	str	r3, [r7, #20]
   return(result);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e4      	bne.n	8003396 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd f87a 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d8:	e03f      	b.n	800345a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00e      	beq.n	8003404 <HAL_UART_IRQHandler+0x560>
 80033e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 ff1e 	bl	800423e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003402:	e02d      	b.n	8003460 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
    }
    return;
 800342c:	e017      	b.n	800345e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_UART_IRQHandler+0x5bc>
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fecf 	bl	80041ea <UART_EndTransmit_IT>
    return;
 800344c:	e008      	b.n	8003460 <HAL_UART_IRQHandler+0x5bc>
      return;
 800344e:	bf00      	nop
 8003450:	e006      	b.n	8003460 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003452:	bf00      	nop
 8003454:	e004      	b.n	8003460 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <HAL_UART_IRQHandler+0x5bc>
      return;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <HAL_UART_IRQHandler+0x5bc>
    return;
 800345e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003460:	37e8      	adds	r7, #232	; 0xe8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b08a      	sub	sp, #40	; 0x28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	4313      	orrs	r3, r2
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4ba4      	ldr	r3, [pc, #656]	; (8003778 <UART_SetConfig+0x2c0>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a99      	ldr	r2, [pc, #612]	; (800377c <UART_SetConfig+0x2c4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	4313      	orrs	r3, r2
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a90      	ldr	r2, [pc, #576]	; (8003780 <UART_SetConfig+0x2c8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d126      	bne.n	8003590 <UART_SetConfig+0xd8>
 8003542:	4b90      	ldr	r3, [pc, #576]	; (8003784 <UART_SetConfig+0x2cc>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b03      	cmp	r3, #3
 800354e:	d81b      	bhi.n	8003588 <UART_SetConfig+0xd0>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0xa0>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	08003579 	.word	0x08003579
 8003560:	08003571 	.word	0x08003571
 8003564:	08003581 	.word	0x08003581
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e116      	b.n	800379e <UART_SetConfig+0x2e6>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e112      	b.n	800379e <UART_SetConfig+0x2e6>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e10e      	b.n	800379e <UART_SetConfig+0x2e6>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e10a      	b.n	800379e <UART_SetConfig+0x2e6>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e106      	b.n	800379e <UART_SetConfig+0x2e6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <UART_SetConfig+0x2d0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d138      	bne.n	800360c <UART_SetConfig+0x154>
 800359a:	4b7a      	ldr	r3, [pc, #488]	; (8003784 <UART_SetConfig+0x2cc>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d82d      	bhi.n	8003604 <UART_SetConfig+0x14c>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <UART_SetConfig+0xf8>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003605 	.word	0x08003605
 80035bc:	08003605 	.word	0x08003605
 80035c0:	080035f5 	.word	0x080035f5
 80035c4:	08003605 	.word	0x08003605
 80035c8:	08003605 	.word	0x08003605
 80035cc:	08003605 	.word	0x08003605
 80035d0:	080035ed 	.word	0x080035ed
 80035d4:	08003605 	.word	0x08003605
 80035d8:	08003605 	.word	0x08003605
 80035dc:	08003605 	.word	0x08003605
 80035e0:	080035fd 	.word	0x080035fd
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e0d8      	b.n	800379e <UART_SetConfig+0x2e6>
 80035ec:	2302      	movs	r3, #2
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f2:	e0d4      	b.n	800379e <UART_SetConfig+0x2e6>
 80035f4:	2304      	movs	r3, #4
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e0d0      	b.n	800379e <UART_SetConfig+0x2e6>
 80035fc:	2308      	movs	r3, #8
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e0cc      	b.n	800379e <UART_SetConfig+0x2e6>
 8003604:	2310      	movs	r3, #16
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e0c8      	b.n	800379e <UART_SetConfig+0x2e6>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5e      	ldr	r2, [pc, #376]	; (800378c <UART_SetConfig+0x2d4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d125      	bne.n	8003662 <UART_SetConfig+0x1aa>
 8003616:	4b5b      	ldr	r3, [pc, #364]	; (8003784 <UART_SetConfig+0x2cc>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003620:	2b30      	cmp	r3, #48	; 0x30
 8003622:	d016      	beq.n	8003652 <UART_SetConfig+0x19a>
 8003624:	2b30      	cmp	r3, #48	; 0x30
 8003626:	d818      	bhi.n	800365a <UART_SetConfig+0x1a2>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d00a      	beq.n	8003642 <UART_SetConfig+0x18a>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d814      	bhi.n	800365a <UART_SetConfig+0x1a2>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <UART_SetConfig+0x182>
 8003634:	2b10      	cmp	r3, #16
 8003636:	d008      	beq.n	800364a <UART_SetConfig+0x192>
 8003638:	e00f      	b.n	800365a <UART_SetConfig+0x1a2>
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003640:	e0ad      	b.n	800379e <UART_SetConfig+0x2e6>
 8003642:	2302      	movs	r3, #2
 8003644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003648:	e0a9      	b.n	800379e <UART_SetConfig+0x2e6>
 800364a:	2304      	movs	r3, #4
 800364c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003650:	e0a5      	b.n	800379e <UART_SetConfig+0x2e6>
 8003652:	2308      	movs	r3, #8
 8003654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003658:	e0a1      	b.n	800379e <UART_SetConfig+0x2e6>
 800365a:	2310      	movs	r3, #16
 800365c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003660:	e09d      	b.n	800379e <UART_SetConfig+0x2e6>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <UART_SetConfig+0x2d8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d125      	bne.n	80036b8 <UART_SetConfig+0x200>
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <UART_SetConfig+0x2cc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003676:	2bc0      	cmp	r3, #192	; 0xc0
 8003678:	d016      	beq.n	80036a8 <UART_SetConfig+0x1f0>
 800367a:	2bc0      	cmp	r3, #192	; 0xc0
 800367c:	d818      	bhi.n	80036b0 <UART_SetConfig+0x1f8>
 800367e:	2b80      	cmp	r3, #128	; 0x80
 8003680:	d00a      	beq.n	8003698 <UART_SetConfig+0x1e0>
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d814      	bhi.n	80036b0 <UART_SetConfig+0x1f8>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <UART_SetConfig+0x1d8>
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d008      	beq.n	80036a0 <UART_SetConfig+0x1e8>
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x1f8>
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003696:	e082      	b.n	800379e <UART_SetConfig+0x2e6>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e07e      	b.n	800379e <UART_SetConfig+0x2e6>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e07a      	b.n	800379e <UART_SetConfig+0x2e6>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e076      	b.n	800379e <UART_SetConfig+0x2e6>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e072      	b.n	800379e <UART_SetConfig+0x2e6>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a35      	ldr	r2, [pc, #212]	; (8003794 <UART_SetConfig+0x2dc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12a      	bne.n	8003718 <UART_SetConfig+0x260>
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <UART_SetConfig+0x2cc>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d0:	d01a      	beq.n	8003708 <UART_SetConfig+0x250>
 80036d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d6:	d81b      	bhi.n	8003710 <UART_SetConfig+0x258>
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d00c      	beq.n	80036f8 <UART_SetConfig+0x240>
 80036de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e2:	d815      	bhi.n	8003710 <UART_SetConfig+0x258>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x238>
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ec:	d008      	beq.n	8003700 <UART_SetConfig+0x248>
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x258>
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e052      	b.n	800379e <UART_SetConfig+0x2e6>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e04e      	b.n	800379e <UART_SetConfig+0x2e6>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e04a      	b.n	800379e <UART_SetConfig+0x2e6>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e046      	b.n	800379e <UART_SetConfig+0x2e6>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e042      	b.n	800379e <UART_SetConfig+0x2e6>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <UART_SetConfig+0x2c4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13a      	bne.n	8003798 <UART_SetConfig+0x2e0>
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <UART_SetConfig+0x2cc>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800372c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003730:	d01a      	beq.n	8003768 <UART_SetConfig+0x2b0>
 8003732:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0x2b8>
 8003738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373c:	d00c      	beq.n	8003758 <UART_SetConfig+0x2a0>
 800373e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003742:	d815      	bhi.n	8003770 <UART_SetConfig+0x2b8>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <UART_SetConfig+0x298>
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d008      	beq.n	8003760 <UART_SetConfig+0x2a8>
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x2b8>
 8003750:	2300      	movs	r3, #0
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e022      	b.n	800379e <UART_SetConfig+0x2e6>
 8003758:	2302      	movs	r3, #2
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e01e      	b.n	800379e <UART_SetConfig+0x2e6>
 8003760:	2304      	movs	r3, #4
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e01a      	b.n	800379e <UART_SetConfig+0x2e6>
 8003768:	2308      	movs	r3, #8
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e016      	b.n	800379e <UART_SetConfig+0x2e6>
 8003770:	2310      	movs	r3, #16
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e012      	b.n	800379e <UART_SetConfig+0x2e6>
 8003778:	efff69f3 	.word	0xefff69f3
 800377c:	40008000 	.word	0x40008000
 8003780:	40013800 	.word	0x40013800
 8003784:	40021000 	.word	0x40021000
 8003788:	40004400 	.word	0x40004400
 800378c:	40004800 	.word	0x40004800
 8003790:	40004c00 	.word	0x40004c00
 8003794:	40005000 	.word	0x40005000
 8003798:	2310      	movs	r3, #16
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a9f      	ldr	r2, [pc, #636]	; (8003a20 <UART_SetConfig+0x568>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d17a      	bne.n	800389e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d824      	bhi.n	80037fa <UART_SetConfig+0x342>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <UART_SetConfig+0x300>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037fb 	.word	0x080037fb
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	080037fb 	.word	0x080037fb
 80037c8:	080037eb 	.word	0x080037eb
 80037cc:	080037fb 	.word	0x080037fb
 80037d0:	080037fb 	.word	0x080037fb
 80037d4:	080037fb 	.word	0x080037fb
 80037d8:	080037f3 	.word	0x080037f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7fe fd38 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80037e0:	61f8      	str	r0, [r7, #28]
        break;
 80037e2:	e010      	b.n	8003806 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e4:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <UART_SetConfig+0x56c>)
 80037e6:	61fb      	str	r3, [r7, #28]
        break;
 80037e8:	e00d      	b.n	8003806 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ea:	f7fe fc99 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80037ee:	61f8      	str	r0, [r7, #28]
        break;
 80037f0:	e009      	b.n	8003806 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	61fb      	str	r3, [r7, #28]
        break;
 80037f8:	e005      	b.n	8003806 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003804:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80fb 	beq.w	8003a04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	429a      	cmp	r2, r3
 800381c:	d305      	bcc.n	800382a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	d903      	bls.n	8003832 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003830:	e0e8      	b.n	8003a04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2200      	movs	r2, #0
 8003836:	461c      	mov	r4, r3
 8003838:	4615      	mov	r5, r2
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	022b      	lsls	r3, r5, #8
 8003844:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003848:	0222      	lsls	r2, r4, #8
 800384a:	68f9      	ldr	r1, [r7, #12]
 800384c:	6849      	ldr	r1, [r1, #4]
 800384e:	0849      	lsrs	r1, r1, #1
 8003850:	2000      	movs	r0, #0
 8003852:	4688      	mov	r8, r1
 8003854:	4681      	mov	r9, r0
 8003856:	eb12 0a08 	adds.w	sl, r2, r8
 800385a:	eb43 0b09 	adc.w	fp, r3, r9
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800386c:	4650      	mov	r0, sl
 800386e:	4659      	mov	r1, fp
 8003870:	f7fc fcaa 	bl	80001c8 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003882:	d308      	bcc.n	8003896 <UART_SetConfig+0x3de>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388a:	d204      	bcs.n	8003896 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e0b6      	b.n	8003a04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800389c:	e0b2      	b.n	8003a04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a6:	d15e      	bne.n	8003966 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d828      	bhi.n	8003902 <UART_SetConfig+0x44a>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <UART_SetConfig+0x400>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038dd 	.word	0x080038dd
 80038bc:	080038e5 	.word	0x080038e5
 80038c0:	080038ed 	.word	0x080038ed
 80038c4:	08003903 	.word	0x08003903
 80038c8:	080038f3 	.word	0x080038f3
 80038cc:	08003903 	.word	0x08003903
 80038d0:	08003903 	.word	0x08003903
 80038d4:	08003903 	.word	0x08003903
 80038d8:	080038fb 	.word	0x080038fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038dc:	f7fe fcb8 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 80038e0:	61f8      	str	r0, [r7, #28]
        break;
 80038e2:	e014      	b.n	800390e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7fe fcca 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 80038e8:	61f8      	str	r0, [r7, #28]
        break;
 80038ea:	e010      	b.n	800390e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ec:	4b4d      	ldr	r3, [pc, #308]	; (8003a24 <UART_SetConfig+0x56c>)
 80038ee:	61fb      	str	r3, [r7, #28]
        break;
 80038f0:	e00d      	b.n	800390e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe fc15 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80038f6:	61f8      	str	r0, [r7, #28]
        break;
 80038f8:	e009      	b.n	800390e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	61fb      	str	r3, [r7, #28]
        break;
 8003900:	e005      	b.n	800390e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800390c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d077      	beq.n	8003a04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005a      	lsls	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	441a      	add	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d916      	bls.n	800395e <UART_SetConfig+0x4a6>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003936:	d212      	bcs.n	800395e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f023 030f 	bic.w	r3, r3, #15
 8003940:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	b29b      	uxth	r3, r3
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	b29a      	uxth	r2, r3
 800394e:	8afb      	ldrh	r3, [r7, #22]
 8003950:	4313      	orrs	r3, r2
 8003952:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	8afa      	ldrh	r2, [r7, #22]
 800395a:	60da      	str	r2, [r3, #12]
 800395c:	e052      	b.n	8003a04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003964:	e04e      	b.n	8003a04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800396a:	2b08      	cmp	r3, #8
 800396c:	d827      	bhi.n	80039be <UART_SetConfig+0x506>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0x4bc>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003999 	.word	0x08003999
 8003978:	080039a1 	.word	0x080039a1
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039bf 	.word	0x080039bf
 8003984:	080039af 	.word	0x080039af
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039bf 	.word	0x080039bf
 8003990:	080039bf 	.word	0x080039bf
 8003994:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7fe fc5a 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 800399c:	61f8      	str	r0, [r7, #28]
        break;
 800399e:	e014      	b.n	80039ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7fe fc6c 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 80039a4:	61f8      	str	r0, [r7, #28]
        break;
 80039a6:	e010      	b.n	80039ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <UART_SetConfig+0x56c>)
 80039aa:	61fb      	str	r3, [r7, #28]
        break;
 80039ac:	e00d      	b.n	80039ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe fbb7 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80039b2:	61f8      	str	r0, [r7, #28]
        break;
 80039b4:	e009      	b.n	80039ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ba:	61fb      	str	r3, [r7, #28]
        break;
 80039bc:	e005      	b.n	80039ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039c8:	bf00      	nop
    }

    if (pclk != 0U)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d019      	beq.n	8003a04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	085a      	lsrs	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	441a      	add	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	d909      	bls.n	80039fe <UART_SetConfig+0x546>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d205      	bcs.n	80039fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	e002      	b.n	8003a04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1e:	bf00      	nop
 8003a20:	40008000 	.word	0x40008000
 8003a24:	00f42400 	.word	0x00f42400

08003a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	d10a      	bne.n	8003b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b7c:	f7fd f80e 	bl	8000b9c <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10e      	bne.n	8003bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f82d 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e023      	b.n	8003bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d10e      	bne.n	8003bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f817 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e00d      	b.n	8003bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b09c      	sub	sp, #112	; 0x70
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0e:	e0a5      	b.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	f000 80a1 	beq.w	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7fc ffbf 	bl	8000b9c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d13e      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c44:	667b      	str	r3, [r7, #100]	; 0x64
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3308      	adds	r3, #8
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e067      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d04f      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cca:	d147      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e6      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	613b      	str	r3, [r7, #16]
   return(result);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d28:	623a      	str	r2, [r7, #32]
 8003d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	69f9      	ldr	r1, [r7, #28]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e010      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	f43f af4a 	beq.w	8003c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3770      	adds	r7, #112	; 0x70
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b096      	sub	sp, #88	; 0x58
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2222      	movs	r2, #34	; 0x22
 8003db0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02b      	beq.n	8003e12 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <UART_Start_Receive_DMA+0x140>)
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a41      	ldr	r2, [pc, #260]	; (8003ecc <UART_Start_Receive_DMA+0x144>)
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <UART_Start_Receive_DMA+0x148>)
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3324      	adds	r3, #36	; 0x24
 8003de4:	4619      	mov	r1, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dea:	461a      	mov	r2, r3
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	f7fd f8cf 	bl	8000f90 <HAL_DMA_Start_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00c      	beq.n	8003e12 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e055      	b.n	8003ebe <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d018      	beq.n	8003e54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	657b      	str	r3, [r7, #84]	; 0x54
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e74:	637a      	str	r2, [r7, #52]	; 0x34
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	613b      	str	r3, [r7, #16]
   return(result);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea8:	623a      	str	r2, [r7, #32]
 8003eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	69f9      	ldr	r1, [r7, #28]
 8003eae:	6a3a      	ldr	r2, [r7, #32]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3758      	adds	r7, #88	; 0x58
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	08003fe7 	.word	0x08003fe7
 8003ecc:	0800410b 	.word	0x0800410b
 8003ed0:	08004143 	.word	0x08004143

08003ed4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6979      	ldr	r1, [r7, #20]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	613b      	str	r3, [r7, #16]
   return(result);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e6      	bne.n	8003edc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003f14:	bf00      	nop
 8003f16:	3724      	adds	r7, #36	; 0x24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b095      	sub	sp, #84	; 0x54
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
 8003f48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e6      	bne.n	8003f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d118      	bne.n	8003fc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	647b      	str	r3, [r7, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e6      	bne.n	8003f96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003fda:	bf00      	nop
 8003fdc:	3754      	adds	r7, #84	; 0x54
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b09c      	sub	sp, #112	; 0x70
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d170      	bne.n	80040e4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004028:	65bb      	str	r3, [r7, #88]	; 0x58
 800402a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800402e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	667b      	str	r3, [r7, #100]	; 0x64
 8004054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800405c:	647a      	str	r2, [r7, #68]	; 0x44
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	623b      	str	r3, [r7, #32]
   return(result);
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004086:	663b      	str	r3, [r7, #96]	; 0x60
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004090:	633a      	str	r2, [r7, #48]	; 0x30
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d118      	bne.n	80040e4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0310 	bic.w	r3, r3, #16
 80040c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	617b      	str	r3, [r7, #20]
   return(result);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040f2:	4619      	mov	r1, r3
 80040f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040f6:	f7fc f9e9 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040fa:	e002      	b.n	8004102 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80040fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040fe:	f7ff f9bd 	bl	800347c <HAL_UART_RxCpltCallback>
}
 8004102:	bf00      	nop
 8004104:	3770      	adds	r7, #112	; 0x70
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	2b01      	cmp	r3, #1
 800411e:	d109      	bne.n	8004134 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7fc f9cd 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004132:	e002      	b.n	800413a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff f9ab 	bl	8003490 <HAL_UART_RxHalfCpltCallback>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004154:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d109      	bne.n	800417e <UART_DMAError+0x3c>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b21      	cmp	r3, #33	; 0x21
 800416e:	d106      	bne.n	800417e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	f7ff feab 	bl	8003ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d109      	bne.n	80041a0 <UART_DMAError+0x5e>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	d106      	bne.n	80041a0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff fec0 	bl	8003f20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a6:	f043 0210 	orr.w	r2, r3, #16
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b0:	6978      	ldr	r0, [r7, #20]
 80041b2:	f7ff f977 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff f961 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b088      	sub	sp, #32
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6979      	ldr	r1, [r7, #20]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	613b      	str	r3, [r7, #16]
   return(result);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff f919 	bl	8003468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004236:	bf00      	nop
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b08c      	sub	sp, #48	; 0x30
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004264:	2b20      	cmp	r3, #32
 8004266:	d14a      	bne.n	80042fe <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e043      	b.n	8004300 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8004282:	2302      	movs	r3, #2
 8004284:	e03c      	b.n	8004300 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	461a      	mov	r2, r3
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff fd74 	bl	8003d88 <UART_Start_Receive_DMA>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80042a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d124      	bne.n	80042f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d11d      	bne.n	80042f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2210      	movs	r2, #16
 80042bc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	617b      	str	r3, [r7, #20]
   return(result);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6a39      	ldr	r1, [r7, #32]
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 80042f0:	e002      	b.n	80042f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80042f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042fc:	e000      	b.n	8004300 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3730      	adds	r7, #48	; 0x30
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4d0d      	ldr	r5, [pc, #52]	; (8004340 <__libc_init_array+0x38>)
 800430c:	4c0d      	ldr	r4, [pc, #52]	; (8004344 <__libc_init_array+0x3c>)
 800430e:	1b64      	subs	r4, r4, r5
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	2600      	movs	r6, #0
 8004314:	42a6      	cmp	r6, r4
 8004316:	d109      	bne.n	800432c <__libc_init_array+0x24>
 8004318:	4d0b      	ldr	r5, [pc, #44]	; (8004348 <__libc_init_array+0x40>)
 800431a:	4c0c      	ldr	r4, [pc, #48]	; (800434c <__libc_init_array+0x44>)
 800431c:	f000 f82e 	bl	800437c <_init>
 8004320:	1b64      	subs	r4, r4, r5
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	2600      	movs	r6, #0
 8004326:	42a6      	cmp	r6, r4
 8004328:	d105      	bne.n	8004336 <__libc_init_array+0x2e>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004330:	4798      	blx	r3
 8004332:	3601      	adds	r6, #1
 8004334:	e7ee      	b.n	8004314 <__libc_init_array+0xc>
 8004336:	f855 3b04 	ldr.w	r3, [r5], #4
 800433a:	4798      	blx	r3
 800433c:	3601      	adds	r6, #1
 800433e:	e7f2      	b.n	8004326 <__libc_init_array+0x1e>
 8004340:	080043e4 	.word	0x080043e4
 8004344:	080043e4 	.word	0x080043e4
 8004348:	080043e4 	.word	0x080043e4
 800434c:	080043e8 	.word	0x080043e8

08004350 <memcpy>:
 8004350:	440a      	add	r2, r1
 8004352:	4291      	cmp	r1, r2
 8004354:	f100 33ff 	add.w	r3, r0, #4294967295
 8004358:	d100      	bne.n	800435c <memcpy+0xc>
 800435a:	4770      	bx	lr
 800435c:	b510      	push	{r4, lr}
 800435e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004366:	4291      	cmp	r1, r2
 8004368:	d1f9      	bne.n	800435e <memcpy+0xe>
 800436a:	bd10      	pop	{r4, pc}

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
